name: FER Model CI/CD Pipeline on Azure

on:
  push:
    branches:
      - main

permissions:
  contents: write
  id-token: write

jobs:
  Continuous Integration:
    name: Continuous Integration and Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.x

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Start and stop Python script
        run: |
          python app.py &
          sleep 5s
          pkill -f "python app.py"

      - name: Lint code
        run: echo "Linting repository"

      - name: Run unit tests
        run: echo "Running unit tests"

  continuous-deployment:
    name: Continuous Deployment
    runs-on: ubuntu-latest
    needs: Continuous Integration

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.x

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v2
        with:
          app-name: 'your-azure-web-app-name'  # Replace with your Azure Web App name
          slot-name: 'production'  # Optional: specify deployment slot


































# name: CICD of FER Flask Application on Azure

# on:
#   push:
#     branches:
#       - main  # Set your main branch name

# jobs:
#   continuous-integration:
#     name: Continuous Integration
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout Repository
#         uses: actions/checkout@v2

#       - name: Set up Python
#         uses: actions/setup-python@v2
#         with:
#           python-version: '3.x'  # Specify your Python version

#       - name: Install dependencies
#         run: |
#           python -m pip install --upgrade pip
#           pip install -r requirements.txt

#   continuous-delivery:
#     name: Continuous Delivery
#     runs-on: ubuntu-latest
#     needs: continuous-integration

#     steps:
#       - name: Checkout Repository
#         uses: actions/checkout@v2

#       - name: Set up Python
#         uses: actions/setup-python@v2
#         with:
#           python-version: '3.x'  # Specify your Python version

#       - name: Install dependencies
#         run: |
#           python -m pip install --upgrade pip
#           pip install -r requirements.txt

#       - name: Start Flask Application
#         run: |
#           export FLASK_APP=app.py
#           export FLASK_ENV=development
#           nohup flask run --host=0.0.0.0 --port=5000 &

#       - name: Wait for Flask to start
#         run: sleep 5  # Adjust as needed to wait for Flask to start

#       - name: Test Flask Application
#         id: test-flask
#         run: curl --retry 10 --retry-connrefused http://localhost:5000  # Adjust URL and port as needed

#       - name: Stop Flask Application
#         if: success()
#         run: pkill -f 'flask run'

#   continuous-deployment:
#     name: Continuous Deployment
#     runs-on: ubuntu-latest
#     needs: continuous-delivery

#     steps:
#       - name: Checkout Repository
#         uses: actions/checkout@v2

#       - name: Azure Login
#         uses: azure/login@v1
#         with:
#           creds: ${{ secrets.AZURE_CREDENTIALS }}

#       - name: Set up Azure CLI
#         uses: azure/CLI@v1
#         with:
#           azcliversion: 2.0.72

#       - name: Deploy to Azure Web App
#         uses: azure/webapps-deploy@v2
#         with:
#           app-name: 'your-web-app-name'  # Replace with your Azure Web App name
#           package: '.'  # Path to your deployment package (current directory)
#           slot-name: 'production'  # Optional: specify deployment slot
